resources:
# Automation scripts repo
  - name: aws_redis_tf_repo
    type: gitRepo
    integration: "drship_github"
    versionTemplate:
      sourceName: "sample-organisation/prov_aws_redis_terraform" #TODO change to devops-recipes
      branch: master

# AWS credentials
  - name: aws_redis_tf_creds
    type: integration
    integration: "drship_aws"

# Terraform State
  - name: aws_redis_tf_state
    type: state

# Output of Amazon ElastiCache Redis provisioning
  - name: aws_redis_tf_info
    type: params
    versionTemplate:
      params:
        SEED: "initial_version"

jobs:
# Provision Amazon ElastiCache Redis with Terraform
  - name: prov_aws_redis_tf
    type: runSh
    steps:
      - IN: aws_redis_tf_repo
        switch: off
      - IN: aws_redis_tf_state
        switch: off
      - IN: aws_redis_tf_creds
        switch: off
      - TASK:
          name: prov_aws_elasticache_redis
          runtime:
            options:
              env:
                - aws_region: "us-east-1"
          script:
            - pushd $(shipctl get_resource_state "aws_redis_tf_repo")
            - export AWS_ACCESS_KEY_ID=$(shipctl get_integration_resource_field aws_redis_tf_creds "accessKey")
            - export AWS_SECRET_ACCESS_KEY=$(shipctl get_integration_resource_field aws_redis_tf_creds "secretKey")
            - shipctl copy_file_from_resource_state aws_redis_tf_state terraform.tfstate .
            - shipctl replace terraform.tfvars
            - terraform init
            - terraform apply -auto-approve -var-file=terraform.tfvars
      - OUT: aws_redis_tf_info
        overwrite: true
      - OUT: aws_redis_tf_state
    on_success:
      script:
        - export engine_version=$(terraform output engine_version)
        - export port=$(terraform output port)
        - export cache_node_0_address=$(terraform output cache_node_0_address)
        - export cache_nodes_0_availability_zone=$(terraform output cache_nodes_0_availability_zone)
        - shipctl put_resource_state_multi aws_redis_tf_info "versionName=$cache_node_0_address" "engine_version=$engine_version" "port=$port" "cache_node_0_address=$cache_node_0_address" "cache_nodes_0_availability_zone=$cache_nodes_0_availability_zone"
    always:
      script:
        - shipctl copy_file_to_resource_state terraform.tfstate aws_redis_tf_state
        - popd
    flags:
      - aws_elasticache
      - redis
      - aws
      - terraform

# De-provision Amazon ElastiCache Redis with Terraform
  - name: deprov_aws_redis_tf
    type: runSh
    steps:
      - IN: aws_vpc_tf_info
      - IN: aws_redis_tf_repo
        switch: off
      - IN: aws_redis_tf_state
        switch: off
      - IN: aws_redis_tf_creds
        switch: off
      - IN: aws_redis_tf_info
        switch: off
      - TASK:
          name: deprov_aws_elasticache_redis
          runtime:
            options:
              env:
                - aws_region: "us-east-1"
          script:
            - pushd $(shipctl get_resource_state "aws_redis_tf_repo")
            - export AWS_ACCESS_KEY_ID=$(shipctl get_integration_resource_field aws_redis_tf_creds "accessKey")
            - export AWS_SECRET_ACCESS_KEY=$(shipctl get_integration_resource_field aws_redis_tf_creds "secretKey")
            - shipctl copy_file_from_resource_state aws_redis_tf_state terraform.tfstate .
            - shipctl replace terraform.tfvars
            - terraform init
            - terraform destroy -force -auto-approve -var-file=terraform.tfvars
      - OUT: aws_redis_tf_state
    always:
      script:
        - shipctl copy_file_to_resource_state terraform.tfstate aws_redis_tf_state
        - popd
    flags:
      - aws_elasticache
      - redis
      - aws
      - terraform
